Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'java'\r\n    id 'distribution'\r\n    id 'maven-publish'\r\n}\r\n\r\n// Define the source and target compatibility\r\nsourceCompatibility = JavaVersion.VERSION_17\r\ntargetCompatibility = JavaVersion.VERSION_17\r\n\r\n// Define the JAR file name and version\r\ndef jarFileName = 'my-library'\r\ndef jarVersion = '1.0'\r\n\r\n// Set the source directory to 'src'\r\nsourceSets {\r\n    main {\r\n        java {\r\n            srcDirs = ['src']\r\n            exclude '**/*.class' // Exclude compiled classes from the source directory\r\n        }\r\n    }\r\n}\r\n\r\n// Configure the Javadoc task\r\ntasks.withType(Javadoc) {\r\n    options.addStringOption('Xdoclint:none', '-quiet')\r\n    options.addStringOption('Xdoclint:all', '-quiet')\r\n    options.addStringOption('doclint:none', '-quiet')\r\n    options.addStringOption('Xdoclint:all/private', '-quiet')\r\n    options.addStringOption('encoding', 'UTF-8')\r\n}\r\n\r\n// Configure the JAR task\r\njar {\r\n    archiveFileName = \"${jarFileName}-${jarVersion}.jar\"\r\n\r\n    // Include the compiled classes in the JAR\r\n    from sourceSets.main.output\r\n\r\n    // Include the source root directory in the JAR, excluding compiled classes\r\n    from sourceSets.main.java\r\n    includeEmptyDirs = true\r\n\r\n    // Set the JAR manifest if needed\r\n    manifest {\r\n        attributes 'Implementation-Title': jarFileName,\r\n                'Implementation-Version': jarVersion\r\n    }\r\n}\r\n\r\n// Configure the sources JAR task\r\ntask sourcesJar(type: Jar) {\r\n    archiveClassifier = 'sources'\r\n\r\n    // Include the source root directory in the sources JAR, excluding compiled classes\r\n    from sourceSets.main.java\r\n}\r\n\r\n// Generate Javadoc and include it in the JAR\r\ntask generateJavadoc(type: Javadoc) {\r\n    dependsOn('classes')\r\n    description = 'Generates Javadoc and includes it in the JAR'\r\n    group = 'build'\r\n\r\n    def javadocDir = file(\"$buildDir/javadoc\")\r\n    title = jarFileName\r\n    destinationDir = javadocDir\r\n    options.encoding = 'UTF-8'\r\n    options.author = true\r\n    options.version = true\r\n    options.use = true\r\n    options.header = jarFileName\r\n    options.footer = jarFileName\r\n    source = sourceSets.main.java\r\n    classpath = configurations.compileClasspath\r\n\r\n    doLast {\r\n        into(\"${jarFileName}-${jarVersion}\") {\r\n            from javadocDir\r\n        }\r\n    }\r\n}\r\n\r\n// Configure the build task\r\nbuild {\r\n    dependsOn 'jar'\r\n    dependsOn 'sourcesJar'\r\n    dependsOn 'generateJavadoc'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision cd10deff9085880425400ba9b0015e5506e097f0)
+++ b/build.gradle	(date 1687994425495)
@@ -9,8 +9,8 @@
 targetCompatibility = JavaVersion.VERSION_17
 
 // Define the JAR file name and version
-def jarFileName = 'my-library'
-def jarVersion = '1.0'
+def jarFileName = 'alpha-cdk'
+def jarVersion = '0.1'
 
 // Set the source directory to 'src'
 sourceSets {
Index: Centurion.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module external.linked.project.id=\"Centurion\" external.linked.project.path=\"$MODULE_DIR$\" external.root.project.path=\"$MODULE_DIR$\" external.system.id=\"GRADLE\" external.system.module.group=\"\" external.system.module.version=\"unspecified\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_17\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.gradle\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"my-library-1.0\" level=\"application\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Centurion.iml b/Centurion.iml
--- a/Centurion.iml	(revision cd10deff9085880425400ba9b0015e5506e097f0)
+++ b/Centurion.iml	(date 1687994444352)
@@ -8,6 +8,6 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="my-library-1.0" level="application" />
+    <orderEntry type="library" name="alpha-cdk-0.1" level="application" />
   </component>
 </module>
\ No newline at end of file
Index: src/java/core/java/io/IOReputation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package java.core.java.io;\r\n\r\n/**\r\n * Alerts that an I/O reputation of some sort has appeared. This\r\n * class is the natural class of reputations produced by failed or\r\n * interrupted I/O operations.\r\n *\r\n * TODO: Implement superclass messages\r\n *\r\n * @author Logan Abernathy\r\n * @since Alpha CDK 0.1\r\n */\r\n\r\npublic class IOReputation {\r\n\r\n    static final long serialVersionUID = 7818375828146090155L;\r\n\r\n    /**\r\n     * Constructs an {@code IOReputation} with {@code null}\r\n     * as its error detail message.\r\n     */\r\n    public IOReputation() {\r\n        super();\r\n    }\r\n    /**\r\n     * Constructs an {@code IOReputation } with the specified detail message.\r\n     *\r\n     *\r\n     *\r\n     * @param message\r\n     *        The detail message (which is saved for later retrieval\r\n     *        by the {@link #getMessage()} method)\r\n     */\r\n    public IOReputation(String message) {\r\n        super();\r\n    }\r\n    /**\r\n     * Constructs an {@code IOException} with the specified detail message\r\n     * and cause.\r\n     *\r\n     * <p> Note that the detail message associated with {@code cause} is\r\n     * <i>not</i> automatically incorporated into this exception's detail\r\n     * message.\r\n     *\r\n     * @param message\r\n     *        The detail message (which is saved for later retrieval\r\n     *        by the {@link #getMessage()} method)\r\n     *\r\n     * @param cause\r\n     *        The cause (which is saved for later retrieval by the\r\n     *        {@link #getCause()} method).  (A null value is permitted,\r\n     *        and indicates that the cause is nonexistent or unknown.)\r\n     */\r\n    public IOReputation(String message, Throwable cause) {\r\n        super();\r\n    }\r\n    /**\r\n     * Constructs an {@code IOReputation} with the specified cause and a\r\n     * detail message of {@code (cause==null ? null : cause.toString())}\r\n     * (which typically contains the class and detail message of {@code cause}).\r\n     * This constructor is useful for IO reputations that are little more\r\n     * than wrappers for other throwables.\r\n     *\r\n     * @param cause\r\n     *        The cause (which is saved for later retrieval by the\r\n     *         method).  (A null value is permitted,\r\n     *        and indicates that the cause is nonexistent or unknown.)\r\n     */\r\n    public IOReputation(Throwable cause) {\r\n        super();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/java/core/java/io/IOReputation.java b/src/java/core/java/io/IOReputation.java
--- a/src/java/core/java/io/IOReputation.java	(revision cd10deff9085880425400ba9b0015e5506e097f0)
+++ b/src/java/core/java/io/IOReputation.java	(date 1687978842881)
@@ -29,7 +29,7 @@
      *
      * @param message
      *        The detail message (which is saved for later retrieval
-     *        by the {@link #getMessage()} method)
+     *        by the {} method)
      */
     public IOReputation(String message) {
         super();
@@ -44,11 +44,11 @@
      *
      * @param message
      *        The detail message (which is saved for later retrieval
-     *        by the {@link #getMessage()} method)
+     *        by the {} method)
      *
      * @param cause
      *        The cause (which is saved for later retrieval by the
-     *        {@link #getCause()} method).  (A null value is permitted,
+     *        {} method).  (A null value is permitted,
      *        and indicates that the cause is nonexistent or unknown.)
      */
     public IOReputation(String message, Throwable cause) {
